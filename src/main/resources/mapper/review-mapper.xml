<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.iei.review.dao.ReviewDao">
    
    <resultMap id="reviewResultMap" type="kr.co.iei.review.dto.Review">
        <id property="id" column="id"/>
        <result property="programId" column="program_id"/>
        <result property="patientId" column="patient_id"/>
        <result property="therapistId" column="therapist_id"/>
        <result property="content" column="content"/>
        <result property="rating" column="rating"/>
        <result property="status" column="status"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="parentId" column="parent_id"/>
        <result property="patientName" column="patient_name"/>
        <result property="therapistName" column="therapist_name"/>
        <result property="programName" column="program_name"/>
    </resultMap>
    
    <insert id="insertReview" parameterType="kr.co.iei.review.dto.Review" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO reviews (
            program_id, patient_id, therapist_id, content, rating, status,
            parent_id, created_at, updated_at
        ) VALUES (
            #{programId}, #{patientId}, #{therapistId}, #{content}, #{rating}, #{status},
            #{parentId}, NOW(), NOW()
        )
    </insert>
    
    <select id="selectReviewById" parameterType="long" resultMap="reviewResultMap">
        SELECT r.*, 
               m1.name as patient_name,
               m2.name as therapist_name,
               p.name as program_name
        FROM reviews r
        LEFT JOIN members m1 ON r.patient_id = m1.id
        LEFT JOIN members m2 ON r.therapist_id = m2.id
        LEFT JOIN programs p ON r.program_id = p.id
        WHERE r.id = #{id}
    </select>
    
    <select id="selectReviewsByProgram" parameterType="long" resultMap="reviewResultMap">
        SELECT r.*, 
               m1.name as patient_name,
               m2.name as therapist_name,
               p.name as program_name
        FROM reviews r
        LEFT JOIN members m1 ON r.patient_id = m1.id
        LEFT JOIN members m2 ON r.therapist_id = m2.id
        LEFT JOIN programs p ON r.program_id = p.id
        WHERE r.program_id = #{programId} AND r.status = 'ACTIVE'
        ORDER BY r.created_at DESC
    </select>
    
    <select id="selectReviewsByPatient" parameterType="long" resultMap="reviewResultMap">
        SELECT r.*, 
               m1.name as patient_name,
               m2.name as therapist_name,
               p.name as program_name
        FROM reviews r
        LEFT JOIN members m1 ON r.patient_id = m1.id
        LEFT JOIN members m2 ON r.therapist_id = m2.id
        LEFT JOIN programs p ON r.program_id = p.id
        WHERE r.patient_id = #{patientId} AND r.status = 'ACTIVE'
        ORDER BY r.created_at DESC
    </select>
    
    <select id="selectReviewsByTherapist" parameterType="long" resultMap="reviewResultMap">
        SELECT r.*, 
               m1.name as patient_name,
               m2.name as therapist_name,
               p.name as program_name
        FROM reviews r
        LEFT JOIN members m1 ON r.patient_id = m1.id
        LEFT JOIN members m2 ON r.therapist_id = m2.id
        LEFT JOIN programs p ON r.program_id = p.id
        WHERE r.therapist_id = #{therapistId} AND r.status = 'ACTIVE'
        ORDER BY r.created_at DESC
    </select>
    
    <update id="updateReview" parameterType="kr.co.iei.review.dto.Review">
        UPDATE reviews SET
            content = #{content},
            rating = #{rating},
            status = #{status},
            updated_at = NOW()
        WHERE id = #{id}
    </update>
    
    <delete id="deleteReview" parameterType="long">
        UPDATE reviews SET status = 'DELETED', updated_at = NOW() WHERE id = #{id}
    </delete>
    
    <select id="countReviewsByProgram" parameterType="long" resultType="int">
        SELECT COUNT(*) FROM reviews WHERE program_id = #{programId} AND status = 'ACTIVE'
    </select>
    
    <select id="getAverageRatingByProgram" parameterType="long" resultType="double">
        SELECT COALESCE(AVG(rating), 0) FROM reviews 
        WHERE program_id = #{programId} AND status = 'ACTIVE' AND rating IS NOT NULL
    </select>
    
</mapper>
